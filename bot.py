from functions import *
import telebot
from telebot import types
from colorama import Fore
import yaml
from datetime import datetime
from dotenv import load_dotenv
import os

load_dotenv()
print(Fore.WHITE + rf""" __   __                     _   ____            _               __        ___  
 \ \ / /                    | | |  _ \          | |             /_ |      / _ \ """ + Fore.BLUE + rf"""
  \ V /   _ __ ___     ___  | | | |_) |   ___   | |_    __   __  | |     | | | |
   > <   | '_ ` _ \   / _ \ | | |  _ <   / _ \  | __|   \ \ / /  | |     | | | | """ + Fore.RED + rf"""
  / . \  | | | | | | |  __/ | | | |_) | | (_) | | |_     \ V /   | |  _  | |_| |
 /_/ \_\ |_| |_| |_|  \___| |_| |____/   \___/   \__|     \_/    |_| (_)  \___/ """ + Fore.CYAN + """
      
     ‚Äî https://github.com/GigaGitCoder """ + Fore.YELLOW + "‚Äî Apache-2.0 license " + Fore.RED +
"‚Äî by Hunter " + Fore.RESET + "\n")

bot = telebot.TeleBot(os.getenv('TOKEN'))  # BOTs TOKEN

AI_deb = ""
Creator_ID = os.getenv('C_ID') # Bot Creator ID
Logs_Group_ID = os.getenv('L_G_ID') # Logs Group ID
Logs_An_Thread_ID = os.getenv('L_A_T_ID') # Logs /an Thread ID
Logs_Notif_Thread_ID = os.getenv('L_N_T_ID') # Logs /notif Thread ID
Logs_Status_Thread_ID = os.getenv('L_S_T_ID') # Logs /status Thread ID
Logs_Flood_Thread_ID = os.getenv('L_F_T_ID') # Logs /* and * Thread ID

'''To find out thread_id's make:

    bot.reply_to(message, message.reply_to_message.message_thread_id)

    Here's your thread_id'''

def normalize_text(text):
    return ' '.join(text.strip().split())

def clear_console():
    # Windows
    if os.name == 'nt':
        os.system('cls')
    # Unix/Linux/Mac
    else:
        os.system('clear')

def escape_formating(text):
    return text.replace('_', '\\_').replace('.', '\\.').replace(':', '\\:').replace('#', '\\#').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)').replace('!', '\\!').replace('**', '*').replace('=', '\\=').replace('<', '\\<').replace('>', '\\>')

def unauthorized_access(message):
    if message.chat.type != 'private':
        bot.send_message(Logs_Group_ID, escape_formating(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n```üí¨Message\n{message.text}```\n\n#Flood_Rights_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")
    else:
        bot.send_message(Logs_Group_ID, escape_formating(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n```üí¨Message\n{message.text}```\n\n#Flood_Rights_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")

def load_admin_ids():
    try:
        with open("admin_list.yaml", 'r', encoding='utf-8') as f:
            return yaml.safe_load(f) or []
    except FileNotFoundError:
        return []  # If null

def deb_refresh():
    global AI_deb
    AI_deb = open(rf"states.txt", 'r', encoding='utf-8').read()

def new_group(chat_id, message):
    chat_type = "group"
    chat_name = message.chat.title

    try:
        with open("users.yaml", "r", encoding="utf-8") as f:
            existing_ids = yaml.safe_load(f) or []
    except FileNotFoundError:
        existing_ids = []

    existing_chat = next((item for item in existing_ids if item['id'] == str(chat_id)), None)

    if existing_chat is None:
        new_chat = {
            'id': str(chat_id),
            'chat_type': chat_type,
            'chat_name': chat_name
        }
        existing_ids.append(new_chat)

        with open("users.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)

def new_user(chat_id, message):
    chat_type = "private"
    chat_name = message.from_user.username

    try:
        with open("users.yaml", "r", encoding="utf-8") as f:
            existing_ids = yaml.safe_load(f) or []
    except FileNotFoundError:
        existing_ids = []

    existing_chat = next((item for item in existing_ids if item['id'] == str(chat_id)), None)

    if existing_chat is None:
        new_chat = {
            'id': str(chat_id),
            'chat_type': chat_type,
            'chat_name': chat_name
        }
        existing_ids.append(new_chat)

        with open("users.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)

def save_chat_id_ad(chat_id, message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ –∏–º—è —á–∞—Ç–∞
    chat_type = "private" if message.chat.type == "private" else "group"
    chat_name = message.chat.username if message.chat.username else message.chat.title

    try:
        with open("ad_check.yaml", "r", encoding="utf-8") as f:
            existing_ids = yaml.safe_load(f) or []
    except FileNotFoundError:
        existing_ids = []

    existing_chat = next((item for item in existing_ids if item['id'] == str(chat_id)), None)

    if existing_chat is None:
        new_chat = {
            'id': str(chat_id),
            'chat_type': chat_type,
            'chat_name': chat_name
        }
        existing_ids.append(new_chat)

        if message.chat.type != 'private':
            bot.send_message(Logs_Group_ID, escape_formating(f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n#Notif_Logs"), message_thread_id=Logs_Notif_Thread_ID, parse_mode="MarkdownV2")
        else:
            bot.send_message(Logs_Group_ID, escape_formating(f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n#Notif_Logs"), message_thread_id=Logs_Notif_Thread_ID, parse_mode="MarkdownV2")


        with open("ad_check.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)
        bot.reply_to(message, "üîà –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞!")

    else:
        existing_ids.remove(existing_chat)

        if message.chat.type != 'private':
            bot.send_message(Logs_Group_ID, escape_formating(f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ ‚ùå {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n#Notif_Logs"), message_thread_id=Logs_Notif_Thread_ID, parse_mode="MarkdownV2")
        else:
            bot.send_message(Logs_Group_ID, escape_formating(f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ ‚ùå {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n#Notif_Logs"), message_thread_id=Logs_Notif_Thread_ID, parse_mode="MarkdownV2")


        with open("ad_check.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)
        bot.reply_to(message, "üîá –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/–æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

def save_chat_id_status(chat_id, message):
    chat_type = "private" if message.chat.type == "private" else "group"
    chat_name = message.chat.username if message.chat.username else message.chat.title

    try:
        with open("status_check.yaml", "r", encoding="utf-8") as f:
            existing_ids = yaml.safe_load(f) or []
    except FileNotFoundError:
        existing_ids = []

    existing_chat = next((item for item in existing_ids if item['id'] == str(chat_id)), None)

    if existing_chat is None:
        new_chat = {
            'id': str(chat_id),
            'chat_type': chat_type,
            'chat_name': chat_name
        }
        existing_ids.append(new_chat)
        
        if message.chat.type != 'private':
            bot.send_message(Logs_Group_ID, escape_formating(f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å-—á–µ–∫ ‚úÖ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n#Status_Logs"), message_thread_id=Logs_Status_Thread_ID, parse_mode="MarkdownV2")
        else:
            bot.send_message(Logs_Group_ID, escape_formating(f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å-—á–µ–∫ ‚úÖ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n#Status_Logs"), message_thread_id=Logs_Status_Thread_ID, parse_mode="MarkdownV2")

        with open("status_check.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)
        bot.reply_to(message, "üîà –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞!")

    else:
        existing_ids.remove(existing_chat)

        if message.chat.type != 'private':
            bot.send_message(Logs_Group_ID, escape_formating(f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å-—á–µ–∫ ‚ùå {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n#Status_Logs"), message_thread_id=Logs_Status_Thread_ID, parse_mode="MarkdownV2")
        else:
            bot.send_message(Logs_Group_ID, escape_formating(f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å-—á–µ–∫ ‚ùå {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n#Status_Logs"), message_thread_id=Logs_Status_Thread_ID, parse_mode="MarkdownV2")

        with open("status_check.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_ids, f, allow_unicode=True)
        bot.reply_to(message, "üîá –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/–æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")



def send_startup_message():
    with open("status_check.yaml", "r", encoding="utf-8") as f:
        chat_ids_load = yaml.safe_load(f) or []
    chat_ids = [chat['id'] for chat in chat_ids_load]

    if chat_ids is not []:
        for chat_id in chat_ids:
            try:
                bot.send_message(chat_id.strip(), "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üòé")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id.strip()}: {e}")

def send_shutdown_message():
    with open("status_check.yaml", "r", encoding="utf-8") as f:
        chat_ids_load = yaml.safe_load(f) or []
    chat_ids = [chat['id'] for chat in chat_ids_load]

    if chat_ids is not []:
        for chat_id in chat_ids:
            try:
                bot.send_message(chat_id.strip(), "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω! üò¢")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id.strip()}: {e}")

@bot.message_handler(content_types=['new_chat_members'])
def new_chat_member(message):
    new_group(message.chat.id, message)

@bot.message_handler(commands=['start', 'help', 'info'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    new_user(message.from_user.id, message)
    bot.reply_to(message, f"""–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ç–≤–æ–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n–Ø –∏–º–µ—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥:
\n/an <–∑–∞–ø—Ä–æ—Å> - –ù–µ–π—Ä–æ–Ω–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å\n/status - –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n/notif - –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n/members - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã\n/help - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞—Ö""", reply_markup=markup)

@bot.message_handler(commands=['an'])
def answer(message):
    new_user(message.from_user.id, message)
    global AI_deb
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if len(message.text.split()) == 1:
        bot.reply_to(message, f"–í–≤–µ–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å üòÅ", reply_markup=markup)
    else:
        count = int(open(rf"Request_Counter.txt", 'r', encoding='utf-8').read())
        if message.text.split()[0] == "/an@ChatHelper24_Bot":
            message.text = "/an " + f"{message.text.split("/an@ChatHelper24_Bot ")[1]}"
        print(Fore.CYAN + f"\n\n–ó–∞–ø—Ä–æ—Å #{count} {datetime.now().strftime("%Y-%m-%d %H:%M:%S")} " + Fore.YELLOW + "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç" + Fore.RED + f" @{message.from_user.username} (id: {message.from_user.id})", end="")
        print(Fore.YELLOW + " –∏–∑ –≥—Ä—É–ø–ø—ã:" + Fore.RED + f" {message.chat.title} (id: {message.chat.id})" if message.chat.type != 'private' else "")
        print(Fore.RED + "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:" + Fore.MAGENTA + f"\n{message.text.split("/an ")[1]}\n")
        rep = AI_answer(
            request_theme = "TG helper", # –ù—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤
            prompt = f"""–¢—ã –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –í–ê–ñ–ù–û: –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –∞ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å—Ç–∞—Ä–∞–π—Å—è –¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç; –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç–æ–≤–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É/—Å–æ–∑–¥–∞—Ç–µ–ª—è –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Å–≤—è–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ —ç—Ç–æ–º—É –Ω–∏–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ: @IgorXmel.
            –í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —á–∞—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≤–∏–¥–µ json: 
            {message}""", # –ù—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–Ω–∏–º–∞–ª –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –∫–∞–∫–∏–µ —Ç–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ —Ç–µ–º–µ –∫ –ø—Ä–∏–º–µ—Ä—É
            text = f"{message.text.split("/an ")[1]}",
            deb = AI_deb
        )
        print(Fore.CYAN + f"\n–ó–∞–ø—Ä–æ—Å #{count} {datetime.now().strftime("%Y-%m-%d %H:%M:%S")} " + Fore.YELLOW + "–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç" + Fore.RED + f" @{message.from_user.username}" + Fore.MAGENTA + f":\n{normalize_text(rep)}\n\n" + Fore.RESET)
        open(f"Request_Counter.txt", 'w', encoding='utf-8').write(str(count+1))
        data = [{'request_id': f"#{count}"},
                {
            'date': datetime.now().strftime("%Y-%m-%d"),
            'time': datetime.now().strftime("%H:%M:%S"),
            'chat_type': message.chat.type,
            'user_id': message.from_user.id,
            'username': f"@{message.from_user.username}",
            'request': message.text.split("/an ")[1],
            'answer': normalize_text(rep)
        }]

        if message.chat.type != 'private':
            bot.send_message(Logs_Group_ID, escape_formating(f'''üîî –ó–∞–ø—Ä–æ—Å #{count} {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n```üë§Request\n{message.text.split("/an ")[1]}\n```\n\n```ü§ñResponse\n{rep}\n```\n\n```üíæyaml\n{data}\n```\n\n#An_Logs'''), message_thread_id=Logs_An_Thread_ID, parse_mode="MarkdownV2")
        else:
            bot.send_message(Logs_Group_ID, escape_formating(f'''üîî –ó–∞–ø—Ä–æ—Å #{count} {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n```üë§Request\n{message.text.split("/an ")[1]}\n```\n\n```ü§ñResponse\n{rep}\n```\n\n```üíæyaml\n{data}\n```\n\n#An_Logs'''), message_thread_id=Logs_An_Thread_ID, parse_mode="MarkdownV2")
            
        with open("requests.yaml", "r", encoding="utf-8") as f:
            existing_requests = yaml.safe_load(f) or []
        existing_requests.append(data)
        with open("requests.yaml", "w", encoding="utf-8") as f:
            yaml.dump(existing_requests, f, allow_unicode=True, default_flow_style=False)
        bot.reply_to(message, escape_formating(f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: #{count+1}):\n\n{rep}"), reply_markup=markup, parse_mode="MarkdownV2")

@bot.message_handler(commands=['members'])
def list_members(message):
    new_user(message.from_user.id, message)
    chat_id = message.chat.id
    
    admins = bot.get_chat_administrators(chat_id)
    admin_list = [f"@{admin.user.username} (id: `{admin.user.id}`)" for admin in admins if admin.user.username]

    member_count = bot.get_chat_members_count(chat_id)
    members = []
    
    for i in range(member_count):
        try:
            member = bot.get_chat_member(chat_id, i)
            if member.user.username:
                members.append(f"@{member.user.username} (id: `{member.user.id}`)")
        except Exception as e:
            pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n\n"
    
    if admin_list:
        response += "üëë–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + "\n".join(admin_list) + "\n\n"
    else:
        response += "üëë–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.\n\n"
    
    if members:
        response += "üë§–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(members) + "\n\n"
    else:
        response += "üë§–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç.\n\n"
    

    if message.chat.type != 'private':
        bot.send_message(Logs_Group_ID, escape_formating(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n```üë§Request\n{message.text}```\n\n```ü§ñResponse\nüßÆ –û—Ç–≤–µ—Ç: {response}```\n\n#Flood_Members_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")
    else:
        bot.send_message(Logs_Group_ID, escape_formating(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n```üë§Request\n{message.text}```\n\n```ü§ñResponse\nüßÆ –û—Ç–≤–µ—Ç: {response}```\n\n#Flood_Members_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")

    bot.reply_to(message, escape_formating(response), parse_mode="MarkdownV2")

@bot.message_handler(commands=['status'])
def status(message):
    new_user(message.from_user.id, message)
    if message.chat.type == 'private' or any(admin.user.id == message.from_user.id for admin in bot.get_chat_administrators(message.chat.id)):
        save_chat_id_status(message.chat.id, message)

    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['notif'])
def notif(message):
    new_user(message.from_user.id, message)
    if message.chat.type == 'private' or any(admin.user.id == message.from_user.id for admin in bot.get_chat_administrators(message.chat.id)):
        save_chat_id_ad(message.chat.id, message)
    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['adhelp'])
def adhelp(message):
    new_user(message.from_user.id, message)
    admin_ids = load_admin_ids()
    user_id = message.from_user.id
    
    if any(admin['id'] == user_id for admin in admin_ids):
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, @{message.from_user.username}! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n/ad <all/id> <msg> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ id –∏–∑ ad_check.yaml –∏–ª–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π id —á–∞—Ç–∞\n/aid - –í–∫–ª/–í—ã–∫–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n/usl - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª—é–¥–µ–π –∏ –≥—Ä—É–ø–ø –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º\n\n‚ö†Ô∏è Project Team Only:\n/cls - –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞\n/stop - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞\n/addad <id> <username> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/remad <id> <username> - –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/lstad - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        unauthorized_access(message)

@bot.message_handler(commands=['aid'])
def AIdebug(message):
    new_user(message.from_user.id, message)
    admin_ids = load_admin_ids()
    user_id = message.from_user.id
    
    if any(admin['id'] == user_id for admin in admin_ids):
        global AI_deb
        deb_refresh()
        if AI_deb == "0":
            AI_deb = 1
            open(f"states.txt", 'w', encoding='utf-8').write(str(AI_deb))
            bot.reply_to(message, "AI debug ‚úÖ")
        else:
            AI_deb = 0
            open(f"states.txt", 'w', encoding='utf-8').write(str(AI_deb))
            bot.reply_to(message, "AI debug ‚ùå")

    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        unauthorized_access(message)

@bot.message_handler(commands=['usl'])
def usl(message):
    new_user(message.from_user.id, message)
    admin_ids = load_admin_ids()
    user_id = message.from_user.id
    
    if any(admin['id'] == user_id for admin in admin_ids):
        with open("users.yaml", "r", encoding="utf-8") as f:
            data = yaml.safe_load(f)

        private_ids = []
        group_ids = []

        for entry in data:
            if entry['chat_type'] == 'private':
                private_ids.append(f"@{entry['chat_name']} (id: `{entry['id']}`)")
            elif entry['chat_type'] == 'group':
                group_ids.append(f"{entry['chat_name']} (id: `{entry['id']}`)")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        private_users = "\n".join(private_ids) if private_ids else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        group_chats = "\n".join(group_ids) if group_ids else "–ù–µ—Ç –≥—Ä—É–ø–ø."

        bot.reply_to(message, escape_formating(f"üë§Users:\n{private_users}\n\nüë•Groups:\n{group_chats}"), parse_mode="MarkdownV2")

    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        unauthorized_access(message)

@bot.message_handler(commands=['ad'])
def ad(message):
    new_user(message.from_user.id, message)
    admin_ids = load_admin_ids()
    user_id = message.from_user.id
    
    if any(admin['id'] == user_id for admin in admin_ids):
        if message.text.split()[0] == "/ad@ChatHelper24_Bot":
            message.text = "/ad " + f"{message.text.split("/ad@ChatHelper24_Bot ")[1]}"
        if len(message.text.split()) == 1:
            bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ: /ad <id/all> <—Ç–µ–∫—Å—Ç>")
        else:
            if message.text.split()[1] != "all":
                try:
                    int(message.text.split()[1])
                    bot.send_message(message.text.split()[1], message.text.split(f"/ad {message.text.split()[1]} ")[1])
                    bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ id: {message.text.split()[1]}")
                except Exception as ValueError:
                    bot.reply_to(message, "‚ùì –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ id —á–∞—Ç–∞")

            else:
                with open("ad_check.yaml", "r", encoding="utf-8") as f:
                    chat_ids_load = yaml.safe_load(f) or []
                chat_ids = [chat['id'] for chat in chat_ids_load]

                counter = 0
                for chat_id in chat_ids:
                    try:
                        bot.send_message(chat_id.strip(), message.text.split(f"/ad {message.text.split()[1]} ")[1])
                        counter += 1
                    except Exception as e:
                        print(Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id.strip()}: {e}" + Fore.RESET)
                
                bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")

    else:
        bot.reply_to(message, "‚úã –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        unauthorized_access(message)


@bot.message_handler(commands=['stop'])
def stop(message):
    new_user(message.from_user.id, message)
    if message.from_user.id == Creator_ID:
        send_shutdown_message()
        print(Fore.RED + "\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" + Fore.RESET)
        bot.reply_to(message, "üîå –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        bot.stop_bot()
        
    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['cls'])
def cls(message):
    new_user(message.from_user.id, message)
    if message.from_user.id == Creator_ID:
        clear_console()
        
    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['addad'])
def addad(message):
    new_user(message.from_user.id, message)
    if message.from_user.id == Creator_ID:
        try:
            username = message.text.split()[2]
            id = int(message.text.split()[1])
        except IndexError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏ username.")
            return

        try:
            with open("admin_list.yaml", "r", encoding="utf-8") as f:
                existing_ids = yaml.safe_load(f) or []
        except FileNotFoundError:
            existing_ids = []

        existing_chat = next((item for item in existing_ids if item['id'] == str(id) or item['username'] == username), None)

        if existing_chat is None:
            new_admin = {
                'id': id,
                'username': username
            }

            existing_ids.append(new_admin)

            bot.send_message(Logs_Group_ID, escape_formating(f"üõÇ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüë§ {username} (id: `{id}`)\n\n#Flood_Adm_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")

            with open("admin_list.yaml", "w", encoding="utf-8") as f:
                yaml.dump(existing_ids, f, allow_unicode=True)
            bot.reply_to(message, escape_formating(f"–¢–µ–ø–µ—Ä—å {username} (id: `{id}`) —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚úÖ"), parse_mode="MarkdownV2")
            bot.send_message(id, f"üõÇ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ ‚úÖ\n\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /adhelp")
        else:
            bot.reply_to(message, escape_formating(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID `{id}` –∏–ª–∏ username {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."), parse_mode="MarkdownV2")

    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['remad'])
def remad(message):
    new_user(message.from_user.id, message)
    if message.from_user.id == Creator_ID:
        try:
            identifier = message.text.split()[1]  # ID or username
        except IndexError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username.")
            return

        try:
            with open("admin_list.yaml", "r", encoding="utf-8") as f:
                existing_ids = yaml.safe_load(f) or []
        except FileNotFoundError:
            existing_ids = []

        existing_chat = next((item for item in existing_ids if item['id'] == int(identifier) or item['username'] == identifier), None)

        if existing_chat is not None:
            existing_ids.remove(existing_chat)

            bot.send_message(Logs_Group_ID, escape_formating(f"üõÇ –ê–¥–º–∏–Ω —É–±—Ä–∞–Ω ‚ùå {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüë§ {existing_chat['username']} (id: `{existing_chat['id']}`)\n\n#Flood_Adm_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")
            bot.send_message(existing_chat['id'], f"üõÇ –í—ã –±–æ–ª—å—à–µ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ ‚ùå")

            with open("admin_list.yaml", "w", encoding="utf-8") as f:
                yaml.dump(existing_ids, f, allow_unicode=True)
            bot.reply_to(message, escape_formating(f"–¢–µ–ø–µ—Ä—å {existing_chat['username']} (id: `{existing_chat['id']}`) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.‚ùå"), parse_mode="MarkdownV2")
        else:
            bot.reply_to(message, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(commands=['lstad'])
def lstad(message):
    new_user(message.from_user.id, message)
    if message.from_user.id == Creator_ID:
        try:
            with open("admin_list.yaml", "r", encoding="utf-8") as f:
                data = yaml.safe_load(f) or []
        except FileNotFoundError:
            data = []

        admin_list = [f"{entry['username']} (id: `{entry['id']}`)" for entry in data if 'username' in entry]

        response = ""
        
        if admin_list:
            response += "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n" + "\n".join(admin_list) + "\n\n"
        else:
            response += "üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.\n\n"

        bot.reply_to(message, escape_formating(response), parse_mode="MarkdownV2")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞")
        unauthorized_access(message)

@bot.message_handler(func=lambda message: True)
def anytime(message):
    new_user(message.from_user.id, message)
    if message.chat.type != 'private':
        bot.send_message(Logs_Group_ID, escape_formating(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\nüë• {message.chat.title} (id: `{message.chat.id}`)\n\n```üí¨Message\n{message.text}```\n\n#Flood_Msg_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")
    else:
        bot.send_message(Logs_Group_ID, escape_formating(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\nüë§ @{message.from_user.username} (id: `{message.from_user.id}`)\n\n```üí¨Message\n{message.text}```\n\n#Flood_Msg_Logs"), message_thread_id=Logs_Flood_Thread_ID, parse_mode="MarkdownV2")
    bot.send_message(message.chat.id, " *–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞*üòî", parse_mode="MarkdownV2")

send_startup_message()
deb_refresh()

bot.polling(none_stop=True)

print(Fore.RED + "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" + Fore.RESET)
send_shutdown_message()